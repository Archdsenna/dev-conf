依赖:
    NodeJS.

1. coc使用方法
    (1) 先安装coc.nvim插件
    (2) 安装Node.js,clangd(mac通过安装llvm,ubuntu用apt)
    (3) 修改npm源为国内源,在~/.npmrc中添加:
        coc.nvim:registry=https://registry.npmmirror.com
    (4) 安装语言的LSP, 并在coc.nvim的配置文件中添加对应lsp的配置:
        例如C语言,可使用ccls作为语言服务器(clangd和ccls的比较见: https://github.com/robottoy001/nvim_config/blob/master/docs/ccls-vs-clangd.md)
        ccls安装方式如下:
        ● ubuntu:源码编译安装
            (4.1) 下载ccls源码
                $ git clone --depth=1 --recursive https://github.com/MaskRay/ccls
                $ cd ccls
            (4.2) 安装依赖
                $ sudo apt install clang cmake libclang-dev llvm-dev rapidjson-dev libncurses5 zlib1g-dev
            (4.3) 编译&安装
                $ cmake -S. -BRelease -DCMAKE_BUILD_TYPE=Release \
                        -DCMAKE_PREFIX_PATH=/usr/lib/llvm-14 \
                        -DLLVM_INCLUDE_DIR=/usr/lib/llvm-14/include \
                        -DLLVM_BUILD_INCLUDE_DIR=/usr/include/llvm-14/
            (4.4) 安装
                $ cmake --build Release --target install
            (4.5) 配置coc.nvim
                (4.5.1) 在vim中执行如下命令:
                    :CocConfig
                (4.5.2) 添加如下内容:
                    {
                      "languageserver": {
                        "ccls": {
                          "command": "ccls",
                          "filetypes": ["c", "cpp", "cuda", "objc", "objcpp"],
                          "rootPatterns": [".ccls-root", "compile_commands.json"],
                          "initializationOptions": {
                            "cache": {
                              "directory": ".ccls-cache"
                            },
                            "client": {
                              "snippetSupport": true
                            }
                          }
                        }
                      }
                    }

    (5) 安装coc.nvim的lsp扩展,例如C语言的clangd, 在vim执行
            :CocInstall coc-clangd
        coc支持的其他可用lsp扩展:
            coc-clangd          [已安装]
            coc-json            [已安装]
            coc-go              [已安装]
            coc-ultisnips       [未安装] Note: 自动补全提供UltiSnips格式(snipMate插件使用的代码片段格式,更简洁)的代码片段候选
            coc-vim-snippets    [已安装] Note: 自动补全提供snipMate(UltiSnips 插件使用的代码片段格式,提供了更多高级功能和更灵活的代码片段定义方式)格式的代码片段候选
            coc-vimlsp          [已安装]
            coc-sh              [已安装] 脚本lsp
2. 检索所有可安装的插件,使用coc-marketplace 直接在Vim 里面进行管理:
         :CocInstall coc-marketplace
   安装完后用下面命令可以打开面板，Tab 可对高亮的子插件进行安装卸载等操作
   (1) 打开面板
         :CocList marketplace
       Tips: 执行完上面命令后,会出现一个模糊搜索输入框,可以输入关键词进行模糊匹配,
             显示所有可选择的插件,在想安装的插件上按Enter进行安装,卸载按tab后按u
   (2) 搜索python 相关子插件
         :CocList marketplace python

3. 查看已安装到插件:
        :CocList extensions

4. 获取可用补全源
        :CocList sources


