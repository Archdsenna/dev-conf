# Note: 
#       (1) tmux前缀键已映射为 *空格*
#       (2) 在tmux里使用vim编辑文件时不要使用水平/垂直分屏, 因为vim的窗口移动与
#           tmux的面板移动前缀键都是空格,所以tmux内使用vim的水平/垂直分割窗口功
#           时会引起冲突。tmux主要目的是为了多窗口操作命令,如果编辑多个文件可以
#           新开一个终端,使用vim进行编辑
#       (3) 如果tmux配置更新完没有生效,执行tmux kill-server
#       (4) tmux绑定键:bind与bind-key区别:
#           bind 和 bind-key 命令是相同的,都用于绑定键到特定的操作。bind-key 是
#           更正式的命令名称, 而 bind 是其简写形式。两者在功能上没有区别

# Tmux 概念
# -------------------------------------                    会话、窗口、面板的关系
# Note: 在tmux中,窗口、窗格(面板)和会话是组织和管理终端环境的核心概念。
#       它们之间的关系可以通过一个层次结构来理解
# (1) 概念:
#       (1.1) 会话 (Session)
#             会话是tmux中的顶层组织结构。一个会话可以包含多个窗口,
#             通常用于组织一组相关的工作环境。例如, 你可以为一个特
#             定的项目或一组任务创建一个会话。会话使得用户可以在多
#             个窗口间切换
#       (1.2) 窗口 (Window)
#             窗口是会话中的一个单元,可以视为一个全屏的终端界面,每
#             个窗口可以包含一个或多个窗格。窗口在视觉上类似于图形
#             界面操作系统中的应用程序窗口。用户可以在一个会话中创
#             建多个窗口, 每个窗口都可以运行不同的应用程序或任务
#       (1.3) 窗格 (Pane)
#             窗格(面板)是窗口内部的分割区域, 每个窗格都可以独立运
#             行终端应用程序
# (2) 关系总结
#       会话: 是包含一组窗口的容器, 每个会话可以独立于其他会话存在。
#       窗口: 是会话中的单个视图, 可以包含一个或多个窗格。
#       窗格: 是窗口内部的分割区, 允许在同一窗口中并行运行和显示多个终端任务。
# (3) 图示:
#       Tmux
#         |- Session 1 (attached)
#         |    |-- Window 1 (attached)
#         |          |---Panel 1 (attached)
#         |          |---Panel 2
#         |    |-- Window 2
#         |          |---Panel 1
#         |
#         |- Session 2
#              |-- Window 1
#                    |---Panel 1
#     Tips: 标记为attached的为当前聚焦的会话、窗口、面板 
#     [注]: 不能在Session中创建新Session,避免会话嵌套


# Tmux usage
# =============================================================================
# -------------------------------------                    tmux命令模式
# Usage:
#   @<Esc> : 按Esc键,命令行模式输入切换到vim normal模式
#            (tmux命令模式默认进入vim instert模式)
 
# -------------------------------------                    查看键映射
# Usage:
#   @tmux list-keys | grep -i Esc : 过滤出包含“Esc”的行,-i选项
#                                   使得搜索不区分大小写
#   @tmux list-keys | grep C-b    : 查看组合键映射

# -------------------------------------                    创建新会话
# Usage:
    # @



# tmux配置
# =============================================================================
# -------------------------------------                    tmux前缀设置
# 重新设置前缀键为 空格, -g表示全局global
set -g prefix Space
# 取消绑定之前的前缀键C-b
unbind C-b

# -------------------------------------                    设置窗口和面板索引
# 第一个窗口和面板的索引为1
set -g base-index 1
setw -g pane-base-index 1

# 配置颜色,让tmux以256色模式显示内容 
set -g default-terminal "screen-256color"      

# 设置前缀键等待延时为 200 毫秒


# -------------------------------------                    面板(pane)
# 面板边框指示，设置颜色+箭头
set -g pane-border-indicators "both"        
# 加粗分割线
set -g pane-border-lines "heavy"            
# 非活动窗口面板边框设置为浅白色
set -g pane-border-style "fg=white"         
# 关闭面板状态栏
set -g pane-border-status "off"             

# -------------------------------------                    tmux键盘模式映射为vim
# 将 tmux 的默认键盘模式设置为 vi 模式,设置之后就可以
# 在滚屏时使用h/j/k/l来控制方向进行移动和复制
setw -g mode-keys vi

# -------------------------------------                    启动焦点检测
# Note: set -g focus-events 是 tmux 的一个选项，用于控制
#       是否启用焦点事件。当启用焦点事件时，tmux 会在焦
#       点切换时发送相应的事件通知。具体来说，当焦点从一
#       个窗格切换到另一个窗格时，焦点事件可以让 tmux 发
#       送相应的通知，以便终端可以根据焦点状态进行相应的
#       调整或处理
set -g focus-events

# -------------------------------------                    复制模式下选中内容的背景色
set -g mode-style bg=#afd7af

# -------------------------------------                    命令行&提示信息背景
# 修改tmux命令行normal模式背景
set -g message-command-style bg=colour151,fg=colour23
# 修改tmux命令行instert模式背景,及提示信息背景
set -g message-style bg=colour150,fg=colour23

# -------------------------------------                    状态栏背景
set -g status-bg colour151
set -g status-fg colour23

# -------------------------------------                    状态栏模式
# 设置tmux状态行的键盘操作模式为vi风格。这意味着当在tmux的状态行
# (例如重命名窗口或者在窗口列表中搜索时)进行文本编辑或命令输入时,
# 键盘快捷键将模仿(vim)编辑器的行为
set -g status-keys vi

# -------------------------------------                    状态栏格式
# 清除状态栏左侧和右侧的默认内容
set -g status-left ""
set -g status-right ""
# 设置状态栏的格式，仅在中间显示信息
# set -g status-format[0] " #[align=centre]#S [W:#I, N:#W] [P:#P]"
# set -g status-format[0] " #[align=centre]#S [W:#I, N:#W] [P:#P] #MY_VAR"
# set -g status-format[0] " #[align=centre]#S [W:#I, N:#W] [P:#P] #{?pane_silent,[Disable],[Enable]}"

# -------------------------------------                    复制模式搜索匹配颜色
# 复制模式搜索匹配项颜色
set -g copy-mode-match-style bg=colour23,fg=colour15
# 复制模式搜索匹配当前项颜色
set -g copy-mode-current-match-style fg=colour23,bg=colour151


# tmux自定义快捷键配置
# =============================================================================
# -------------------------------------                    更新配置文件
# Usage:
#       @前缀键+r : tmux内更新配置文件
# Tips:
#       tmux外(未运行tmux时)更新配置文件,在终端执行如下命令:
#           $ tmux source-file ~/.tmux.conf 
bind r source-file ~/.tmux.conf \; display "Reloaded OK!"

# -------------------------------------                    空格输入
# Usage:
#       @空格x2 : 输入空格(将空格作为普通字符进行输入)
bind Space send-prefix

# -------------------------------------                    面板最大/恢复
# Usage:
#        @前缀键+m : 最大化面板,再按一次恢复
# Tips: 助记, m=max, 即最大化面板
bind-key m run-shell "tmux set-window-option -g aggressive-resize on; tmux resize-pane -Z"

# -------------------------------------                    分割面板
# Usage:
#       @前缀键+v : 垂直分割面板
#       @前缀键+f : 水平分割面板
#                   Tips: 助记,f的'-'表示水平
bind v split-window -h
bind f split-window -v

# -------------------------------------                    切换面板
# Usage:
#       @前缀键+h/j/k/l : 移动到左/上/右/下面板
#       @前缀键+p       : 进入面板选择模式,按h/j/k/l切换面板
#       @p              : 退出面板选择模式
#       @h/j/k/l        : 选择面板
# 单个面板选择
bind h select-pane -L # 左
bind j select-pane -U # 上
bind k select-pane -D # 下
bind l select-pane -R # 右

# 连续面板选择
bind-key p {
    # display-message "Enter Panel Switch"
    set -g status-format[0] " #[align=centre]#S [W:#I, N:#W] [P:#P] [E] [#{?window_zoomed_flag,Z,z}] #[fg=colour15,bg=colour74,bold][Switch]#[default] #{?pane_mode,[#{pane_mode}],} "
    # 在面板选择模式中, 使用方向键持续切换面板
    # -n 选项表示绑定的键将直接被 tmux 捕获, 而不需要前缀键
    bind -n h select-pane -L # 左
    bind -n j select-pane -U # 上
    bind -n k select-pane -D # 下
    bind -n l select-pane -R # 右
    # 设置 'p' 退出面板选择模式并解除方向键绑定
    bind -n p {
        # send-keys -X cancel
        unbind -n j
        unbind -n k
        unbind -n h
        unbind -n l
        unbind -n p  
        # display-message "Exit Panel Switch"
        set -g status-format[0] " #[align=centre]#S [W:#I, N:#W] [P:#P] [E] [#{?window_zoomed_flag,Z,z}] #{?pane_mode,[#{pane_mode}],} "
    }
}

# -------------------------------------                    调整窗口大小
# Usage:
#       @前缀键+w : 进入窗口调整模式,按h/j/k/l持续调整窗口大小
#       @w        : 再按一次退出窗口调整(此时在窗口调整模式中)
#       @h/j/k/l  : 向左/上/下/右扩大面板
# Tips:
#       此时仍然可以切换窗口,tmux只要按下前缀键,可以执行任何
#       已映射的命令
# 设置 'w' 键进入窗口大小调整模式
bind-key w {
    # display-message "Enter Panel Resize"
    set -g status-format[0] " #[align=centre]#S [W:#I, N:#W] [P:#P] [E] [#{?window_zoomed_flag,Z,z}] #[bg=colour228,bold][Resize]#[default] #{?pane_mode,[#{pane_mode}],} "
    # 在窗口大小调整模式中, 使用方向键持续调整窗口大小
    # -n 选项表示绑定的键将直接被 tmux 捕获, 而不需要前缀键
    bind -n j resize-pane -U 5
    bind -n k resize-pane -D 5
    bind -n h resize-pane -L 20
    bind -n l resize-pane -R 20
    # 设置 'w' 退出窗口大小调整模式并解除方向键绑定
    bind -n w {
        # send-keys -X cancel
        unbind -n j
        unbind -n k
        unbind -n h
        unbind -n l
        unbind -n w  
        # display-message "Exit Panel Resize"
        set -g status-format[0] " #[align=centre]#S [W:#I, N:#W] [P:#P] [E] [#{?window_zoomed_flag,Z,z}] #{?pane_mode,[#{pane_mode}],} "
    }
}

# -------------------------------------                    进入复制模式(可滚屏)
# Note: 前缀+s进入复制模式,h/j/k/l移动光标到目标位置,按v
#       开始复制,此时可以继续h/j/k/l移动选择要复制的内容,
#       最后按y复制选中的内容到系统剪贴版
# Tips: 复制模式下支持像vim一样进行移动选择,例如vfb,选择到字符b
# Usage:
#       @前缀键+g : g=gun,即'滚'动,进入滚动(复制模式可滚动)
#       @h/j/k/l  : 移动光标左/上/下/右
#       @H/J/K/L  : 大幅度左/上/下/右移动
#       @w/b      : 跳到下/上一个单词
#       @a        : 跳转到行首,助记:a是字母开头,表示开头,即行首
#       @d        : 跳转到行尾,助记:d=en_d_, 表示结尾,即行尾
#       @gg/G     : 跳转到顶部/底部
#       @v        : 按v开始复制(开始选中内容)
#       @y        : 按y将选中的内容复制到系统剪贴板
#       @cmd+v    : 粘贴
#       @Enter    : 按Enter退出复制模式(返回tmux)
#
# 设置快捷键进入复制模式,可按h/j/k/l移动光标
bind-key g copy-mode    # 助记: g=gun, 即'滚'动,进入滚动模式(复制模式可滚动)
                        # Tips: 当左右tmux分屏都进入复制模式时,
                        #       前缀键+h/j/k/l切换分屏同样生效,
                        #       并且会保持分屏的模式状态(如果是复制
                        #       模式切换分屏后继续保持复制模式)

# Note: bind-key -T copy-mode-vi j send-keys -X cursor-up 命令解释
#   (1) -T 选项用于指定一个键绑定表(key table),键绑定表是一组键绑定的集合,这些键绑定定义了在特定模式下按键的行为
#   (2) -T copy-mode-vi 表示键绑定只在 copy-mode-vi 表被激活时有效
#   (3) j 指定触发动作的按键是 j 
#   (4) send-keys 定义了按下j时执行的动作, 即执行tmux的cursor-up命令
#       -X 表示执行一个对应的tmux命令,而不是发送按键到终端。cursor-up是tmux的一个内部命令,用于在复制模式中将光标向上移动一行
bind-key -T copy-mode-vi j send-keys -X cursor-up
bind-key -T copy-mode-vi k send-keys -X cursor-down
bind-key -T copy-mode-vi J run-shell "tmux set repeat-time 0; for i in {1..15}; do tmux send-keys -X cursor-up; done"
bind-key -T copy-mode-vi K run-shell "tmux set repeat-time 0; for i in {1..15}; do tmux send-keys -X cursor-down; done"
bind-key -T copy-mode-vi H run-shell "tmux set repeat-time 0; for i in {1..8}; do tmux send-keys -X cursor-left; done"
bind-key -T copy-mode-vi L run-shell "tmux set repeat-time 0; for i in {1..8}; do tmux send-keys -X cursor-right; done"

# 将选中内容复制到系统剪贴板映射为按 y
bind-key -T copy-mode-vi y send-keys -X copy-pipe "tmux save-buffer - | pbcopy"

# 在 copy-mode-vi 模式下按 v 键开始复制
bind-key -T copy-mode-vi v send-keys -X begin-selection

# 设置复制模式下，'a' 跳转到行首
bind-key -T copy-mode-vi 'a' send-keys -X start-of-line
# 设置复制模式下，'d' 跳转到行尾
bind-key -T copy-mode-vi 'd' send-keys -X end-of-line


# -------------------------------------                    进入/退出同时操作所有面板模式
# Usage:
#       @前缀键+a : 按第1次进入同时操作所有面板模式,再按退出
# Tips:
#       使用技巧,可以配合前缀键+d关闭不需要操作的面板,例如只
#       保留当前一个tmux窗口,关闭其他所有窗口,先将不关的窗口
#       禁用(前缀键+d),然后切换至其他窗口按前缀按+a 同步操作
#       所有面板输入exit,最后在禁用的面板上按前缀键+e重启编辑
# 使用前缀键+s 开启/关闭同时操作所有面板的模式
bind-key a setw synchronize-panes   # 助记: a=all, 即所有面板

# -------------------------------------                    显示面板编号
# Usage:
#       @前缀键+n : 显示面板编号,直到输入数字编号才消失
# Tips: 助记,n=number, 即数字编号
# 设置前缀键 + n 来显示面板编号，持续显示直到输入
bind n display-panes -d 999999999

# -------------------------------------                    清空屏幕
# Usage: 
#       @前缀键+o : 清空屏幕,助记:o=0,清零,即清空
bind o send-keys C-l \

# -------------------------------------                    退出面板
# Usage:
#       @前缀键+q : 退出面板(当只有一个面板会退出tmux,
#                   不会kill-server)
unbind q
bind-key q kill-pane  

# -------------------------------------                    显示/隐藏底部状态栏 
# Usage:
#       @前缀键+b : 按一次显示状态栏,再按隐藏
# Tips: b=bar, 栏,即状态栏

# 状态栏默认开启
set -g status on

# 切换状态栏的显示:
#   如果状态栏是显示的,它会被隐藏;
#   如果是隐藏的,它会被显示
bind b set status

# -------------------------------------                    屏幕中部显示时间
# Usage:
#       @前缀键+t : 屏幕显示数字时钟,按任意键退出

# -------------------------------------                    禁用/启用当前面板输入
# Usage:
#       @前缀键+d : 禁用当前面板输入,d=disable
#       @前缀键+e : 启用当前面板输入,e=edit
# bind-key d select-pane -d
# bind-key e select-pane -e


set -g status-format[0] " #[align=centre]#S [W:#I N:#W] [P:#P] [E] #{?window_zoomed_flag,#[bg=colour131 fg=colour15][Z]#[default],[z]} #[fg=colour196,bg=colour234,bold]#{?client_prefix,[Prefix],}#[default]#[fg=colour15,bg=colour166,bold]#{?pane_mode,[#{pane_mode}],}#[default] #[fg=colour15,bg=colour88,bold]#{?pane_synchronized,[Sync],}#[default] "



# 绑定键'd'以选择面板，并且取消选择其他面板
# bind-key d select-pane -d \; set -g status-format[0] " #[align=centre]#S [W:#I, N:#W] [P:#P] #[fg=red,bold][D]#[default]"
bind-key d select-pane -d \; set -g status-format[0] " #[align=centre]#S [W:#I, N:#W] [P:#P] #[fg=colour15,bg=colour88,bold][D]#[default] [#{?window_zoomed_flag,Z,z}] #{?pane_mode,[#{pane_mode}],} "
bind-key e select-pane -e \; set -g status-format[0] " #[align=centre]#S [W:#I, N:#W] [P:#P] [E] [#{?window_zoomed_flag,Z,z}] #{?pane_mode,[#{pane_mode}],} "

# bind-key u run-shell "bash ~/set_env_var.sh #S #I #P"
# bind-key y run-shell "bash source /tmp/tmux_env.sh && echo \$#S #I #P"

# bind-key -T copy-mode 'k' send-keys -X cursor-down
# 在 choose-mode 中绑定 'k' 为向上选择
# bind-key -T copy-mode 'j' send-keys -X cursor-up

